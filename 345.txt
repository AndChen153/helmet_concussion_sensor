# Distributed with a free-will license.
# Use it any way you want, profit or free, provided it fits in the licenses of its associated works.
# ADXL345
# This code is designed to work with the ADXL345_I2CS I2C Mini Module available from ControlEverything.com.
# https://www.controleverything.com/content/Accelorometer?sku=ADXL345_I2CS#tabs-0-product_tabset-2

from OmegaExpansion import onionI2C
import time
import math
import os

EARTH_GRAVITY_MS2   = 9.80665
e    = float(0.004)

# Get I2C bus
i2c = onionI2C.OnionI2C()

# ADXL345 address, 0x53(83)
# Select bandwidth rate register, 0x2C(44)
#		0x0A(10)	Normal mode, Output data rate = 100 Hz
i2c.writeByte(0x53, 0x2C, 0x0A)
# ADXL345 address, 0x53(83)
# Select power control register, 0x2D(45)
#		0x08(08)	Auto Sleep disable
i2c.writeByte(0x53, 0x2D, 0x08)
# ADXL345 address, 0x53(83)
# Select data format register, 0x31(49)
#		0x08(08)	Self test disabled, 4-wire interface
#					Full resolution, Range = +/-2g
i2c.writeByte(0x53, 0x31, 0x08)


def readdata():
	# ADXL345 address, 0x53(83)
	# Read data back from 0x32(50), 2 bytes
	# X-Axis LSB, X-Axis MSB
	data0 = i2c.readBytes(0x53, 0x32, 1)
	data1 = i2c.readBytes(0x53, 0x33, 1)
	
	# Convert the data to 10-bits
	xAccl = ((data1[0] & 0x03) * 256) + data0[0]
	if xAccl > 511 :
		xAccl -= 1024
	
	# ADXL345 address, 0x53(83)
	# Read data back from 0x34(52), 2 bytes
	# Y-Axis LSB, Y-Axis MSB
	data0 = i2c.readBytes(0x53, 0x34, 1)
	data1 = i2c.readBytes(0x53, 0x35, 1)
	
	# Convert the data to 10-bits
	yAccl = ((data1[0] & 0x03) * 256) + data0[0]
	if yAccl > 511 :
		yAccl -= 1024
	
	# ADXL345 address, 0x53(83)
	# Read data back from 0x36(54), 2 bytes
	# Z-Axis LSB, Z-Axis MSB
	data0 = i2c.readBytes(0x53, 0x36, 1)
	data1 = i2c.readBytes(0x53, 0x37, 1)
	
	# Convert the data to 10-bits
	zAccl = ((data1[0] & 0x03) * 256) + data0[0]
	if zAccl > 511 :
		zAccl -= 1024
		
	xAccl = float(xAccl) * e
	yAccl = float(yAccl) * e
	zAccl = float(zAccl) * e
	
	g0=(xAccl**2+yAccl**2+zAccl**2)
	g=math.sqrt(g0)
	
	#print (str(xAccl) + "\t" + str(yAccl) + "\t" + str(zAccl))
	#print (str(g0))
	#print (str(g) + "\n")
	return g
'''
run=True
while run == True:
    os.system ("ifconfig | grep 192.168 > /root/accel/networkstatus")
    f=open('/root/accel/networkstatus' , 'r')
    j=f.read()
    if j:
        run=False
'''

#os.system ('scp /root/accel/playernum_10_is_online pi@192.168.0.22:/home/pi/Downloads')	
count = 0
#while count<500:
while True:
	g=readdata()
	#print ("gforces: " + str(g) + "\n")
	a="Gforces: "+str(g) + "\n"
	count = count+1
	#time.sleep(0.1)
	if float(g)>float(2):
		s = open('/root/accel/playernum_10', 'a')
		s.write(a)
		print (str(a))
		s.close()
		print ('stop')
		#os.system ('scp /root/accel/playernum_10 pi@192.168.0.22.:/home/pi/Downloads &')
		time.sleep(0.2)
	
	
   
# Output data to screen
#print "Acceleration in X-Axis : %.3f" %xAccl
#print "Acceleration in Y-Axis : %.3f" %yAccl
#print "Acceleration ytes(0x53, 0x35, 1)

	
'''	


in Z-Axis : %.3f" %zAccl
#print "\n"
#time.sleep(0.5)
	
	
'''

